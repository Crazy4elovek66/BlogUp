import os
from flask import Flask, render_template, send_from_directory
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import logging
from dotenv import load_dotenv

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__, template_folder='templates', static_folder='static')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    return render_template('index.html', app_name="BlogUp")

@app.route('/static/<path:filename>')
def static_files(filename):
    return send_from_directory('static', filename)

# Telegram Bot Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            'clicks': 0,
            'level': 1,
            'upgrades': {},
            'last_click_time': None
        }
    
    keyboard = [
        [InlineKeyboardButton("–ö–ª–∏–∫–Ω—É—Ç—å!", callback_data='click')],
        [InlineKeyboardButton("–£–ª—É—á—à–µ–Ω–∏—è", callback_data='upgrades'),
         InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlogUp!\n\n"
        f"üîπ –ö–ª–∏–∫–∏: {user_data[user_id]['clicks']}\n"
        f"üîπ –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']}",
        reply_markup=reply_markup
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        if query.data == 'click':
            # –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞
            user_data[user_id]['clicks'] += 1
            clicks = user_data[user_id]['clicks']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è (–∫–∞–∂–¥—ã–µ 10 –∫–ª–∏–∫–æ–≤ - –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
            new_level = clicks // 10 + 1
            if new_level > user_data[user_id]['level']:
                user_data[user_id]['level'] = new_level
                await query.answer(f"üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=f"BlogUp - –£—Ä–æ–≤–µ–Ω—å {user_data[user_id]['level']}\n\n"
                     f"üîπ –ö–ª–∏–∫–∏: {user_data[user_id]['clicks']}\n"
                     f"üîπ –£–ª—É—á—à–µ–Ω–∏–π: {len(user_data[user_id].get('upgrades', {}))}",
                reply_markup=query.message.reply_markup
            )
        
        elif query.data == 'upgrades':
            # –ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏–π
            keyboard = [
                [InlineKeyboardButton("+1 –∫–ª–∏–∫/—Å–µ–∫ (100 –∫–ª–∏–∫–æ–≤)", callback_data='buy_auto_click')],
                [InlineKeyboardButton("x2 –º–Ω–æ–∂–∏—Ç–µ–ª—å (500 –∫–ª–∏–∫–æ–≤)", callback_data='buy_multiplier')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text="üõ† –£–ª—É—á—à–µ–Ω–∏—è:\n\n"
                     "1. –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: +1 –∫–ª–∏–∫/—Å–µ–∫\n"
                     "2. –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x2 –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–∫—É",
                reply_markup=reply_markup
            )
        
        elif query.data == 'stats':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
            stats_text = (
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üîπ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user_data[user_id]['clicks']}\n"
                f"üîπ –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']}\n"
                f"üîπ –£–ª—É—á—à–µ–Ω–∏–π: {len(user_data[user_id].get('upgrades', {}))}\n"
                f"üîπ ID –∏–≥—Ä–æ–∫–∞: {user_id}"
            )
            await query.edit_message_text(
                text=stats_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
                ])
            )
        
        elif query.data == 'main_menu':
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("–ö–ª–∏–∫–Ω—É—Ç—å!", callback_data='click')],
                [InlineKeyboardButton("–£–ª—É—á—à–µ–Ω–∏—è", callback_data='upgrades'),
                 InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=f"BlogUp - –£—Ä–æ–≤–µ–Ω—å {user_data[user_id]['level']}\n\n"
                     f"üîπ –ö–ª–∏–∫–∏: {user_data[user_id]['clicks']}\n"
                     f"üîπ –£–ª—É—á—à–µ–Ω–∏–π: {len(user_data[user_id].get('upgrades', {}))}",
                reply_markup=reply_markup
            )
        
        elif query.data.startswith('buy_'):
            # –õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
            if query.data == 'buy_auto_click' and user_data[user_id]['clicks'] >= 100:
                user_data[user_id]['clicks'] -= 100
                user_data[user_id].setdefault('upgrades', {})['auto_click'] = True
                await query.answer("‚úÖ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∫—É–ø–ª–µ–Ω! +1 –∫–ª–∏–∫/—Å–µ–∫")
            elif query.data == 'buy_multiplier' and user_data[user_id]['clicks'] >= 500:
                user_data[user_id]['clicks'] -= 500
                user_data[user_id].setdefault('upgrades', {})['multiplier'] = True
                await query.answer("‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—É–ø–ª–µ–Ω! x2 –∫ –∫–ª–∏–∫–∞–º")
            else:
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!")
            
            await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
    
    except Exception as e:
        logger.error(f"Error in button_click: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º Telegram Application
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000}).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()