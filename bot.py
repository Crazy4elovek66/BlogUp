import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3
import os

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• (SQLite) =====
def init_db():
    conn = sqlite3.connect("hamster.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            coins INTEGER DEFAULT 0,
            click_power INTEGER DEFAULT 1,
            referrals INTEGER DEFAULT 0
        )
    """)
    conn.commit()
    conn.close()

def get_user_data(user_id):
    conn = sqlite3.connect("hamster.db")
    cursor = conn.cursor()
    cursor.execute("SELECT coins, click_power, referrals FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    conn.close()
    if data:
        return {"coins": data[0], "click_power": data[1], "referrals": data[2]}
    else:
        return {"coins": 0, "click_power": 1, "referrals": 0}

def update_user_data(user_id, coins=None, click_power=None, referrals=None):
    user = get_user_data(user_id)
    if coins is not None:
        user["coins"] = coins
    if click_power is not None:
        user["click_power"] = click_power
    if referrals is not None:
        user["referrals"] = referrals
    
    conn = sqlite3.connect("hamster.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO users (user_id, coins, click_power, referrals)
        VALUES (?, ?, ?, ?)
    """, (user_id, user["coins"], user["click_power"], user["referrals"]))
    conn.commit()
    conn.close()

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if len(context.args) > 0 and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id != user_id:
            referrer = get_user_data(referrer_id)
            referrer["coins"] += 5
            referrer["referrals"] += 1
            update_user_data(referrer_id, coins=referrer["coins"], referrals=referrer["referrals"])
    
    user = get_user_data(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üî® –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click")],
        [InlineKeyboardButton("üõí –£–ª—É—á—à–µ–Ω–∏—è", callback_data="upgrades"),
         InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üêπ Hamster Kombat Clone\n\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: {user['coins']}\n"
        f"üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user['click_power']}\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π: /invite",
        reply_markup=reply_markup
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user = get_user_data(user_id)
    
    if query.data == "click":
        user["coins"] += user["click_power"]
        update_user_data(user_id, coins=user["coins"])
        await query.answer(f"+{user['click_power']} –º–æ–Ω–µ—Ç!")
    
    elif query.data == "upgrades":
        keyboard = [
            [InlineKeyboardButton(f"üí™ +1 –∫ –∫–ª–∏–∫—É (10 –º–æ–Ω–µ—Ç)", callback_data="buy_power_1")],
            [InlineKeyboardButton(f"üöÄ x2 –¥–æ—Ö–æ–¥ (50 –º–æ–Ω–µ—Ç)", callback_data="buy_multiplier")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['coins']} –º–æ–Ω–µ—Ç",
            reply_markup=reply_markup
        )
        return
    
    elif query.data == "referrals":
        ref_link = f"https://t.me/{context.bot.username}?start={user_id}"
        await query.edit_message_text(
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['referrals']}\n"
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5 –º–æ–Ω–µ—Ç!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])
        )
        return
    
    elif query.data.startswith("buy_"):
        if query.data == "buy_power_1":
            if user["coins"] >= 10:
                user["coins"] -= 10
                user["click_power"] += 1
                update_user_data(user_id, coins=user["coins"], click_power=user["click_power"])
                await query.answer("–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!")
            else:
                await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        elif query.data == "buy_multiplier":
            if user["coins"] >= 50:
                user["coins"] -= 50
                user["click_power"] *= 2
                update_user_data(user_id, coins=user["coins"], click_power=user["click_power"])
                await query.answer("–î–æ—Ö–æ–¥ —É–¥–≤–æ–µ–Ω!")
            else:
                await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return
    
    elif query.data == "back":
        await start(update, context)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üî® –ö–ª–∏–∫–Ω—É—Ç—å", callback_data="click")],
        [InlineKeyboardButton("üõí –£–ª—É—á—à–µ–Ω–∏—è", callback_data="upgrades"),
         InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üêπ Hamster Kombat Clone\n\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: {user['coins']}\n"
        f"üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user['click_power']}\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π: /invite",
        reply_markup=reply_markup
    )

async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ref_link = f"https://t.me/{context.bot.username}?start={user_id}"
    await update.message.reply_text(
        f"üîó –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å 5 –º–æ–Ω–µ—Ç!"
    )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    logger = logging.getLogger(__name__)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("invite", invite))
    application.add_handler(CallbackQueryHandler(button_click))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()