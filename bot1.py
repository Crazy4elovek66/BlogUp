import os
import logging
from telegram import Update, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import psycopg2
from psycopg2 import pool
import json
from contextlib import contextmanager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL
connection_pool = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    global connection_pool
    try:
        connection_pool = psycopg2.pool.SimpleConnectionPool(
            minconn=1,
            maxconn=5,
            dsn=os.getenv("DATABASE_URL"),
            sslmode="require"
        )
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL")
        
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,
                        coins INTEGER DEFAULT 0,
                        click_power INTEGER DEFAULT 1,
                        upgrades JSONB DEFAULT '{}'
                    )
                """)
                conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

@contextmanager
def get_db_connection():
    conn = None
    try:
        conn = connection_pool.getconn()
        yield conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise
    finally:
        if conn:
            connection_pool.putconn(conn)

def get_user_data(user_id):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT coins, click_power, upgrades 
                    FROM users WHERE user_id = %s
                """, (user_id,))
                result = cursor.fetchone()
                if result:
                    return {
                        'coins': result[0],
                        'click_power': result[1],
                        'upgrades': result[2] if result[2] else {}
                    }
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def update_user_data(user_id, coins=None, click_power=None, upgrades=None):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                if all(v is not None for v in [coins, click_power, upgrades]):
                    cursor.execute("""
                        INSERT INTO users (user_id, coins, click_power, upgrades)
                        VALUES (%s, %s, %s, %s)
                        ON CONFLICT (user_id) DO UPDATE
                        SET coins = EXCLUDED.coins, 
                            click_power = EXCLUDED.click_power,
                            upgrades = EXCLUDED.upgrades
                    """, (user_id, coins, click_power, json.dumps(upgrades)))
                elif coins is not None and click_power is not None:
                    cursor.execute("""
                        INSERT INTO users (user_id, coins, click_power)
                        VALUES (%s, %s, %s)
                        ON CONFLICT (user_id) DO UPDATE
                        SET coins = EXCLUDED.coins, 
                            click_power = EXCLUDED.click_power
                    """, (user_id, coins, click_power))
                elif coins is not None:
                    cursor.execute("""
                        INSERT INTO users (user_id, coins)
                        VALUES (%s, %s)
                        ON CONFLICT (user_id) DO UPDATE
                        SET coins = EXCLUDED.coins
                    """, (user_id, coins))
                conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_data = get_user_data(user_id)
        if not user_data:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_data(user_id, 0, 1, {})
            user_data = {'coins': 0, 'click_power': 1, 'upgrades': {}}
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
        keyboard = [
            [InlineKeyboardButton(
                "üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", 
                web_app=WebAppInfo(url=f"https://–≤–∞—à-—Å–∞–π—Ç.vercel.app?user_id={user_id}"))
            ]
        ]
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hamster Kombat!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
def debug_db():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM users")
            print("–î–∞–Ω–Ω—ã–µ –≤ –ë–î:")
            for row in cursor.fetchall():
                print(row)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        data = json.loads(update.message.web_app_data.data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        update_user_data(
            user_id,
            coins=data.get('coins'),
            click_power=data.get('click_power'),
            upgrades=data.get('upgrades', {})
        )
        
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Web App: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

# API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
async def get_user_data_api(user_id: int):
    try:
        data = get_user_data(user_id)
        if data:
            return {
                'status': 'success',
                'data': {
                    'coins': data['coins'],
                    'click_power': data['click_power'],
                    'upgrades': data['upgrades']
                }
            }
        return {'status': 'error', 'message': 'User not found'}
    except Exception as e:
        logger.error(f"API Error for user {user_id}: {e}")
        return {'status': 'error', 'message': str(e)}

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_TOKEN', 'DATABASE_URL', 'WEB_APP_URL']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    init_db()
    
    app = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling(
        drop_pending_updates=True,
        close_loop=False,
        stop_signals=None
    )

if __name__ == "__main__":
    main()
